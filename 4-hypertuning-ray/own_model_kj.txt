model:


import torch.nn as nn
import torch.nn.functional as F

class KJConvNet(nn.Module):
    def __init__(self, num_classes: int = 2):
        super().__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
        self.bn1   = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn2   = nn.BatchNorm2d(64)
        self.dropout = nn.Dropout(0.5)
        self.fc1   = nn.Linear(64 * 56 * 56, 128)  # afhankelijk van input size
        self.fc2   = nn.Linear(128, num_classes)

    def forward(self, x):
        x = F.relu(self.bn1(self.conv1(x)))
        x = F.max_pool2d(x, 2)
        x = F.relu(self.bn2(self.conv2(x)))
        x = F.max_pool2d(x, 2)
        x = self.dropout(torch.flatten(x, 1))
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x


model laden

model = KJConvNet(num_classes=2).to(device)

lossfn = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
scheduler = lr_scheduler.StepLR(optimizer, step_size=7, gamma=0.1)

model trainen

epochs = 3
model = train_model(
    model=model,
    lossfn=lossfn,
    optimizer=optimizer,
    scheduler=scheduler,
    num_epochs=epochs,
    dataloaders=dataloaders,
    dataset_sizes=dataset_sizes,
    device=device,
)
